// Computes the "brightness" of a color
//
// Brightness is similiar to lightness in HSL but more closely approximates
// how humans perceive the intensity of the different RGB components of
// a color. Brightness is sometimes called luminance.
//
// Returns a number between 0% and 100%, where 100% is fully bright
// (white) and 0% is fully dark (black) for color values.
//
// For numbers and percentages it returns the same value to be used
// in `@include filter(brightness(1.1))`.
@function brightness($color) {
    @if type-of($color) == color {
      @return ((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)) / 255 * 100%;
    }
    @else {
      @return unquote("brightness(#{$color})");
    }
  }
  
  $contrasted-dark-default:   #000 !default;
$contrasted-light-default:  #fff !default;

// Returns the `$light` color when the `$color` is dark
// and the `$dark` color when the `$color` is light.
// The brightness calculations determine when the lightness of
// `$color` changes from "dark" to "light".
@function contrast-color(
  $color,
  $dark: $contrasted-dark-default,
  $light: $contrasted-light-default
) {

  $color-brightness: round((red($color) * 299) + (green($color) * 587) + (blue($color) * 114) / 1000);
  $dark-text-brightness: round((red($dark) * 299) + (green($dark) * 587) + (blue($dark) * 114) / 1000);
  $light-text-brightness: round((red($light) * 299) + (green($light) * 587) + (blue($light) * 114) / 1000);

  @return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
}

// Sets the specified background color and calculates a dark or light contrasted text color.
// The arguments are passed through to the [contrast-color function](#function-contrast-color).
@mixin contrasted(
  $background-color,
  $dark: $contrasted-dark-default,
  $light: $contrasted-light-default
) {
  background-color: $background-color;
  color: contrast-color($background-color, $dark, $light);
}